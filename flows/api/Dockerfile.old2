# Stage 1: Build GDAL with all necessary dependencies
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.11 as builder

WORKDIR /deps

# Install build dependencies (including Oracle Instant Client dependencies)
RUN apt-get update && \
    apt-get install -y \
      build-essential \
      cmake \
      python3-dev \
      python3-numpy \
      libproj-dev \
      libsqlite3-dev \
      libtiff-dev \
      libjpeg-dev \
      libpng-dev \
      libgeos-dev \
      libcurl4-gnutls-dev \
      wget \
      sudo \
      libpq-dev \
      imagemagick \
      libaio1 \
      unzip \
      p7zip-full \
      unar \
      tar && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Download and compile GDAL from source with PostgreSQL support
RUN wget https://github.com/OSGeo/gdal/releases/download/v3.9.3/gdal-3.9.3.tar.gz && \
    tar -xvf gdal-3.9.3.tar.gz && \
    cd gdal-3.9.3 && \
    mkdir build && cd build && \
    cmake .. -DGDAL_BUILD_OPTIONAL_DRIVERS=ON -DGDAL_USE_PYTHON=ON -DGDAL_ENABLE_POSTGRES=ON && \
    make -j$(nproc) && \
    sudo make install && \
    sudo ldconfig

# Stage 2: Final runtime image with only the necessary files
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.11 as final

# Copy the GDAL installation from the builder stage (binaries, libs, etc.)
COPY --from=builder /usr/local/ /usr/local/

# Ensure GDAL's shared libraries are discoverable
ENV LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"

WORKDIR /app

# Copy and install Python dependencies
COPY requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

# Optional: verify GDAL installation (can be removed if not needed)
RUN gdalinfo --version && ogrinfo --formats | grep -i postgres

# Copy your application code
COPY . /app

